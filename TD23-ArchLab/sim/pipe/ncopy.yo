                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Achille Nazaret - achille.nazaret
                            | #
                            | # I removed first all the useless variable affections to compute sums, 
                            | # also implemented iaddq
                            | # I tried to unroll the main loop into 4 mem access at a time 
                            | # in order to avoid bubbles (reading and writing back the bytes)
                            | # 
                            | # I had to deal with the base cases with len=3,2,1 or 0, that i tried
                            | # to determine using binary search (I was able this way to take advantage
                            | # of the two conditions jle and jl to discrimate multiple cases in only two cycles)
                            | #  
                            | # Finally I removed consecutive %rax +1 when doing the unroll loops (4 by for)
                            | # doing a hardcoded +x (+4,+1,+2,+3) given the different cases
                            | #
                            | # I've been careful to take advantage of the prediction of conditionnal jumps
                            | # when the jump is the same most of the time 
                            | #
                            | #  HAVE REMOVED init RAX=0 SINCE all the test were successful with that
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | #	xorq %rax,%rax		# count = 0;
0x000: c0f2f0ffffffffffffff | 	iaddq $-16,%rdx		# len < 0?
0x00a: 751c00000000000000   | 	jge Loop16		# if so, goto Done:
0x013: 708b01000000000000   | 	jmp Loop4
                            | 
0x01c:                      | Loop16: #We know that we have at least 16 more addresses to read
0x01c: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x026: 50970800000000000000 |  	mrmovq 8(%rdi), %r9	# read val from src...
0x030: 50a71000000000000000 |  	mrmovq 16(%rdi), %r10	# read val from src...
0x03a: 50b71800000000000000 |  	mrmovq 24(%rdi), %r11	# read val from src..
                            | 
0x044: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst	
0x04e: 6288                 | 	andq %r8, %r8		# 
0x050: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x05a: 50c72000000000000000 |  	mrmovq 32(%rdi), %r12	# read val from src..
0x064: 717700000000000000   | 	jle Not1		# if so, goto Npos:
0x06d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x077:                      | Not1:
0x077: 6299                 | 	andq %r9, %r9		# 
0x079: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x083: 50872800000000000000 |  	mrmovq 40(%rdi), %r8	# read val from src..
0x08d: 71a000000000000000   | 	jle Not2		# if so, goto Npos:
0x096: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a0:                      | Not2:
0x0a0: 62aa                 | 	andq %r10, %r10		# 
0x0a2: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0ac: 50973000000000000000 |  	mrmovq 48(%rdi), %r9	# read val from src..
0x0b6: 71c900000000000000   | 	jle Not3		# if so, goto Npos:
0x0bf: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c9:                      | Not3:
0x0c9: 62bb                 | 	andq %r11, %r11		# 
0x0cb: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	# ...and store it to dst
0x0d5: 50a73800000000000000 |  	mrmovq 56(%rdi), %r10	# read val from src..
0x0df: 71f200000000000000   | 	jle Not4		# if so, goto Npos:
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f2:                      | Not4:
0x0f2: 62cc                 | 	andq %r12, %r12		# 
0x0f4: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)	# ...and store it to ds
0x0fe: 711101000000000000   | 	jle Not5		# if so, goto Npos:
0x107: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x111:                      | Not5:
0x111: 6288                 | 	andq %r8, %r8		# 
0x113: 40963000000000000000 | 	rmmovq %r9, 48(%rsi)	# ...and store it to dst
0x11d: 713001000000000000   | 	jle Not6		# if so, goto Npos:
0x126: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x130:                      | Not6:
0x130: 6299                 | 	andq %r9, %r9		# 
0x132: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x13c: 714f01000000000000   | 	jle Not7		# if so, goto Npos:
0x145: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x14f:                      | Not7:
0x14f: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x159: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x163: 62aa                 | 	andq %r10, %r10		# 
0x165: 717801000000000000   | 	jle Not8		# if so, goto Npos:
0x16e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x178:                      | Not8:
0x178: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x182: 751c00000000000000   | 	jge Loop16			# if so, goto Loop:		
                            | 	
                            | 
0x18b:                      | Loop4: #We know that we have at least 4 more addresses to read
0x18b: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
0x195: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x19f: 50b70800000000000000 |  	mrmovq 8(%rdi), %r11	# read val from src...
0x1a9: 50c71000000000000000 |  	mrmovq 16(%rdi), %r12	# read val from src...
0x1b3: 50d71800000000000000 |  	mrmovq 24(%rdi), %r13	# read val from src...
0x1bd: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x1c7: 40a6e0ffffffffffffff | 	rmmovq %r10, -32(%rsi)	# ...and store it to dst
0x1d1: 62aa                 | 	andq %r10, %r10		# We load now the value to CC even if I dont think it has any impact
0x1d3: 40b6e8ffffffffffffff | 	rmmovq %r11, -24(%rsi)	# ...and store it to dst
0x1dd: 40c6f0ffffffffffffff | 	rmmovq %r12, -16(%rsi)	# ...and store it to dst
0x1e7: 40d6f8ffffffffffffff | 	rmmovq %r13, -8(%rsi)	# ...and store it to dst
                            | #
                            | #  I call PosXY the state where Y (among the four) memcells 
                            | #  are already tested and X are positives
                            | #
0x1f1: 763702000000000000   | 	jg Pos11
0x1fa:                      | Pos01:
0x1fa: 62bb                 | 	andq %r11, %r11		# val > 0?
0x1fc: 764202000000000000   | 	jg Pos12				
0x205:                      | Pos02:
0x205: 62cc                 | 	andq %r12, %r12		# val > 0?
0x207: 761c03000000000000   | 	jg Pos13
0x210:                      | Pos03:
0x210: 62dd                 | 	andq %r13, %r13		# val > 0?
0x212: 76bf03000000000000   | 	jg Pos14
0x21b:                      | Pos04:
0x21b: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x225: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:		
0x22e: 70e503000000000000   | 	jmp Last		
                            | 
0x237:                      | Pos11:
0x237: 62bb                 | 	andq %r11, %r11		# val > 0?
0x239: 767e02000000000000   | 	jg Pos22	
0x242:                      | Pos12:
0x242: 62cc                 | 	andq %r12, %r12		# val > 0?
0x244: 76eb02000000000000   | 	jg Pos23
0x24d: 62dd                 | 	andq %r13, %r13		# val > 0?
0x24f: 767303000000000000   | 	jg Pos24
0x258: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x262: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x26c: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x275: 70e503000000000000   | 	jmp Last
                            | 	
0x27e:                      | Pos22:
0x27e: 62cc                 | 	andq %r12, %r12		# val > 0?
0x280: 76ba02000000000000   | 	jg Pos33
0x289: 62dd                 | 	andq %r13, %r13		# val > 0?
0x28b: 769903000000000000   | 	jg Pos34
0x294: c0f00200000000000000 | 	iaddq $2, %rax		# count++
0x29e: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x2a8: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x2b1: 70e503000000000000   | 	jmp Last
                            | 
0x2ba:                      | Pos33:
0x2ba: 62dd                 | 	andq %r13, %r13		# val > 0?
0x2bc: 764d03000000000000   | 	jg Pos44
0x2c5: c0f00300000000000000 | 	iaddq $3, %rax		# count++
0x2cf: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x2d9: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x2e2: 70e503000000000000   | 	jmp Last
                            | 
0x2eb:                      | Pos23:
0x2eb: 62dd                 | 	andq %r13, %r13		# val > 0?
0x2ed: 769903000000000000   | 	jg Pos34
0x2f6: c0f00200000000000000 | 	iaddq $2, %rax		# count++
0x300: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x30a: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x313: 70e503000000000000   | 	jmp Last
                            | 
0x31c:                      | Pos13:
0x31c: 62dd                 | 	andq %r13, %r13		# val > 0?
0x31e: 767303000000000000   | 	jg Pos24
0x327: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x331: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x33b: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x344: 70e503000000000000   | 	jmp Last
                            | 		
0x34d:                      | Pos44:
0x34d: c0f00400000000000000 | 	iaddq $4, %rax		# count++
0x357: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x361: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x36a: 70e503000000000000   | 	jmp Last
                            | 	
0x373:                      | Pos24:
0x373: c0f00200000000000000 | 	iaddq $2, %rax		# count++
0x37d: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x387: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x390: 70e503000000000000   | 	jmp Last
                            | 	
0x399:                      | Pos34:
0x399: c0f00300000000000000 | 	iaddq $3, %rax		# count++
0x3a3: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x3ad: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x3b6: 70e503000000000000   | 	jmp Last
                            | 	
0x3bf:                      | Pos14:
0x3bf: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3c9: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x3d3: 768b01000000000000   | 	jg Loop4			# if so, goto Loop:	
0x3dc: 70e503000000000000   | 	jmp Last
                            | 		
0x3e5:                      | Last: #We have len-3 <= 0 ie len<=3 : 0, 1, 2 or 3 cells to copy
                            | 	# rdx is -3, -2, -1 or 0  (mean len is 0,1,2 or 3) BINARY SEARCH
0x3e5: c0f20200000000000000 | 	iaddq $2, %rdx 	#rdx is now -1,0 ,1,2
0x3ef: 712505000000000000   | 	jle BS_neg
                            | 	
0x3f8:                      | BS_pos:	
                            | 	#Here rax is 1 or 2 (meaning len 2 or 3)
0x3f8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx 	#rdx is now 0 ,1 (len 2 or 3) 
0x402: 766604000000000000   | 	jg BS_3
                            | 	
0x40b:                      | BS_2:
                            | 	# Do 2 copies
0x40b: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x415: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x41f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x429: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x433: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x435: 714804000000000000   | 	jle NPos2_1		# if so, goto Npos:
0x43e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x448:                      | NPos2_1:
0x448: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x44a: 712e05000000000000   | 	jle Done		# if so, finish:
0x453: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x45d: 702e05000000000000   | 	jmp Done
                            | 	
0x466:                      | BS_3:
                            | 	#Do 3 copies
0x466: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x470: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x47a: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x484: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x48e: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x498: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x4a2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x4a4: 71b704000000000000   | 	jle NPos3_1		# if so, goto Npos:
0x4ad: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x4b7:                      | NPos3_1:
0x4b7: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x4b9: 71cc04000000000000   | 	jle NPos3_2		# if so, goto Npos:
0x4c2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x4cc:                      | NPos3_2:
0x4cc: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x4ce: 712e05000000000000   | 	jle Done		# if so, finish:
0x4d7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x4e1: 702e05000000000000   | 	jmp Done
                            | 
0x4ea:                      | BS_1:
                            | 	#Do 1 copie
0x4ea: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | #	iaddq $8, %rdi		# src++
0x4f4: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | #	iaddq $8, %rsi		# dst++
0x4fe: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x500: 761205000000000000   | 	jg BS_1_ADD
0x509: 702e05000000000000   | 	jmp Done
                            | 
0x512:                      | BS_1_ADD:
0x512: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x51c: 702e05000000000000   | 	jmp Done
                            | 
0x525:                      | BS_neg:
                            | 	#Here rdx is -1 or 0 (meaning len 0 or 1)
                            | #	andq %rdx, %rdx #No need, still in CC
0x525: 75ea04000000000000   | 	jge BS_1 # len 0
                            | 		
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x52e:                      | Done:
0x52e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x52f:                      | End:
                            | #/* $end ncopy-ys */
