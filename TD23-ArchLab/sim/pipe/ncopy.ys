#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Achille Nazaret - achille.nazaret
#
# I removed first all the useless variable affections to compute sums, 
# also implemented iaddq
# I tried to unroll the main loop into 4 mem access at a time 
# in order to avoid bubbles (reading and writing back the bytes)
# 
# I had to deal with the base cases with len=3,2,1 or 0, that i tried
# to determine using binary search (I was able this way to take advantage
# of the two conditions jle and jl to discrimate multiple cases in only two cycles)
#  
# Finally I removed consecutive %rax +1 when doing the unroll loops (4 by for)
# doing a hardcoded +x (+4,+1,+2,+3) given the different cases
#
# I've been careful to take advantage of the prediction of conditionnal jumps
# when the jump is the same most of the time 
#
#  HAVE REMOVED init RAX=0 SINCE all the test were successful with that
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
#	xorq %rax,%rax		# count = 0;
	iaddq $-8,%rdx		# len < 0?
	jl preLoop2		# if so, goto Done:

Loop8: #We know that we have at least 8 more addresses to read
	mrmovq (%rdi), %r8	# read val from src...
 	mrmovq 8(%rdi), %r9	# read val from src...
 	mrmovq 16(%rdi), %r10	# read val from src...
 	mrmovq 24(%rdi), %r11	# read val from src..

	rmmovq %r8, (%rsi)	# ...and store it to dst	
	andq %r8, %r8		# 
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
 	mrmovq 32(%rdi), %r12	# read val from src..
	jle Not1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not1:
	andq %r9, %r9		# 
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
 	mrmovq 40(%rdi), %r8	# read val from src..
	jle Not2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not2:
	andq %r10, %r10		# 
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
 	mrmovq 48(%rdi), %r9	# read val from src..
	jle Not3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not3:
	andq %r11, %r11		# 
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
 	mrmovq 56(%rdi), %r10	# read val from src..
	jle Not4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not4:
	andq %r12, %r12		# 
	rmmovq %r8, 40(%rsi)	# ...and store it to ds
	jle Not5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not5:
	andq %r8, %r8		# 
	rmmovq %r9, 48(%rsi)	# ...and store it to dst
	jle Not6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not6:
	andq %r9, %r9		# 
	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	jle Not7		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not7:
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++
	andq %r10, %r10		# 
	jle Not8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not8:
	iaddq $-8, %rdx		# len--
	jge Loop8			# if so, goto Loop:		
		
# -8, ... -1  +2, while >0
preLoop2:
	iaddq $6, %rdx		# len-8 back to len-2
	jl Last			# if so, goto Loop:		

Loop2: #We know that we have 2 more addresses to read
	
	mrmovq (%rdi), %r10	# read val from src...
 	mrmovq 8(%rdi), %r11	# read val from src...
	iaddq $16, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# We load now the value to CC even if I dont think it has any impact
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	iaddq $16, %rsi		# dst++
	
	andq %r10, %r10		# 
	jle Not10		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not10:
	andq %r11, %r11		# 
	jle Not11		# if so, goto Npos:
	iaddq $1, %rax		# count++
Not11:
	iaddq $-2, %rdx		# len--
	jge Loop2			# if so, goto Loop:		


Last: #We have len-3 <= 0 ie len<=3 : 0, 1, 2 or 3 cells to copy
	iaddq $2, %rdx 	#rdx is now 0 ,1
	jg Last1
	jmp Done

Last1:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jg BS_1_ADD
	jmp Done

BS_1_ADD:
	iaddq $1, %rax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
