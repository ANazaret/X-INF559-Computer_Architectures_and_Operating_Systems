#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Achille Nazaret - achille.nazaret
#
# I removed first all the useless variable affections to compute sums, 
# also implemented iaddq
# I tried to unroll the main loop into 4 mem access at a time 
# in order to avoid bubbles (reading and writing back the bytes)
# 
# I had to deal with the base cases with len=3,2,1 or 0, that i tried
# to determine using binary search (I was able this way to take advantage
# of the two conditions jle and jl to discrimate multiple cases in only two cycles)
#  
# Finally I removed consecutive %rax +1 when doing the unroll loops (4 by for)
# doing a hardcoded +x (+4,+1,+2,+3) given the different cases
#
# I've been careful to take advantage of the prediction of conditionnal jumps
# when the jump is the same most of the time 
#
#  HAVE REMOVED init RAX=0 SINCE all the test were successful with that
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
#	xorq %rax,%rax		# count = 0;
	iaddq $-5,%rdx		# len < 0?
	jg Loop6		# if so, goto Done:
	jmp Last

Loop6: #We know that we have at least 4 more addresses to read
	mrmovq (%rdi), %r10	# read val from src...
 	mrmovq 8(%rdi), %r11	# read val from src...
 	mrmovq 16(%rdi), %r12	# read val from src...
 	mrmovq 24(%rdi), %r13	# read val from src...
 	mrmovq 32(%rdi), %r8	# read val from src...
 	mrmovq 40(%rdi), %r9	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r8, 32(%rsi)	# ...and store it to dst
	rmmovq %r9, 40(%rsi)	# ...and store it to dst

	iaddq $48, %rdi		# src++
	iaddq $48, %rsi		# dst++
	
	
	andq %r8, %r8		# val > 0?
	jle PosR8
	iaddq $1, %rax
PosR8:
	andq %r9, %r9		# val > 0?
	jle PosR9
	iaddq $1, %rax
PosR9:	
	
	andq %r10, %r10		
#
#  I call PosXY the state where Y (among the six) memcells 
#  are already tested and X are positives
#
	jg Pos11
Pos01:
	andq %r11, %r11		# val > 0?
	jg Pos12				
Pos02:
	andq %r12, %r12		# val > 0?
	jg Pos13
Pos03:
	andq %r13, %r13		# val > 0?
	jg Pos14
Pos04:
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:		

Pos11:
	andq %r11, %r11		# val > 0?
	jg Pos22	
Pos12:
	andq %r12, %r12		# val > 0?
	jg Pos23
	andq %r13, %r13		# val > 0?
	jg Pos24
	iaddq $1, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	
	
Pos22:
	andq %r12, %r12		# val > 0?
	jg Pos33
	andq %r13, %r13		# val > 0?
	jg Pos34
	iaddq $2, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	


Pos33:
	andq %r13, %r13		# val > 0?
	jg Pos44
	iaddq $3, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	


Pos23:
	andq %r13, %r13		# val > 0?
	jg Pos34
	iaddq $2, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:		

Pos13:
	andq %r13, %r13		# val > 0?
	jg Pos24
	iaddq $1, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	
		
Pos44:
	iaddq $4, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	
	
Pos24:
	iaddq $2, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	
	
Pos34:
	iaddq $3, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	
	
Pos14:
	iaddq $1, %rax		# count++
	iaddq $-6, %rdx		# len--
	jg Loop6
	jmp Last			# if so, goto Loop:	
	
EndLoop:
	iaddq $-6, %rdx		# len--
	jg Loop6
		
Last: #We have len-5 <= 0 ie len<=5 : 0, 1, 2, 3, 4 or 5 cells to copy
	iaddq $4, %rdx		# count++
	jl Done

Copy1:
	mrmovq (%rdi), %r8		# read val from src...
	mrmovq 8(%rdi), %r9		# Prepare val for free
	mrmovq 16(%rdi), %r10		# 
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Not1		# if so, goto Not:
	iaddq $1, %rax		# count++
Not1:
	iaddq $-1, %rdx		
	jl Done
Copy2:
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r9, %r9		# val <= 0?
	jle Not2		# if so, goto Not:
	iaddq $1, %rax		# count++
Not2:
	iaddq $-1, %rdx		
	jl Done
Copy3:
	mrmovq 24(%rdi), %r11
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Not3		# if so, goto Not:
	iaddq $1, %rax		# count++
Not3:
	iaddq $-1, %rdx		
	jl Done
Copy4:
	mrmovq 32(%rdi), %r12
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11		# val <= 0?
	jle Not4		# if so, goto Not:
	iaddq $1, %rax		# count++
Not4:
	iaddq $-1, %rdx		
	jl Done
Copy5:
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12		# val <= 0?
	jle Done		# if so, goto Not:
	iaddq $1, %rax		# count++




##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
