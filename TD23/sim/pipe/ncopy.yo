                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax,%rax		# count = 0;
0x002: c0f2fdffffffffffffff | 	iaddq $-3,%rdx		# len < 0?
0x00c: 761e00000000000000   | 	jg Loop4		# if so, goto Done:
0x015: 707802000000000000   | 	jmp Last
                            | 
0x01e:                      | Loop4: #We know that we have at least 4 more addresses to read
0x01e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x028: 50b70800000000000000 |  	mrmovq 8(%rdi), %r11	# read val from src...
0x032: 50c71000000000000000 |  	mrmovq 16(%rdi), %r12	# read val from src...
0x03c: 50d71800000000000000 |  	mrmovq 24(%rdi), %r13	# read val from src...
0x046: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x050: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x05a: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x064: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x06e: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
0x078: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x082: 62aa                 | 	andq %r10, %r10		# val > 0?
0x084: 76ca00000000000000   | 	jg Pos11
0x08d:                      | Pos01:
0x08d: 62bb                 | 	andq %r11, %r11		# val > 0?
0x08f: 76d500000000000000   | 	jg Pos12				
0x098:                      | Pos02:
0x098: 62cc                 | 	andq %r12, %r12		# val > 0?
0x09a: 76af01000000000000   | 	jg Pos13
0x0a3:                      | Pos03:
0x0a3: 62dd                 | 	andq %r13, %r13		# val > 0?
0x0a5: 765202000000000000   | 	jg Pos14
0x0ae:                      | Pos04:
0x0ae: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x0b8: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:		
0x0c1: 707802000000000000   | 	jmp Last		
                            | 
0x0ca:                      | Pos11:
0x0ca: 62bb                 | 	andq %r11, %r11		# val > 0?
0x0cc: 761101000000000000   | 	jg Pos22	
0x0d5:                      | Pos12:
0x0d5: 62cc                 | 	andq %r12, %r12		# val > 0?
0x0d7: 767e01000000000000   | 	jg Pos23
0x0e0: 62dd                 | 	andq %r13, %r13		# val > 0?
0x0e2: 760602000000000000   | 	jg Pos24
0x0eb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f5: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x0ff: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x108: 707802000000000000   | 	jmp Last
                            | 	
                            | 
0x111:                      | Pos22:
0x111: 62cc                 | 	andq %r12, %r12		# val > 0?
0x113: 764d01000000000000   | 	jg Pos33
0x11c: 62dd                 | 	andq %r13, %r13		# val > 0?
0x11e: 762c02000000000000   | 	jg Pos34
0x127: c0f00200000000000000 | 	iaddq $2, %rax		# count++
0x131: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x13b: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x144: 707802000000000000   | 	jmp Last
                            | 
0x14d:                      | Pos33:
0x14d: 62dd                 | 	andq %r13, %r13		# val > 0?
0x14f: 76e001000000000000   | 	jg Pos44
0x158: c0f00300000000000000 | 	iaddq $3, %rax		# count++
0x162: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x16c: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x175: 707802000000000000   | 	jmp Last
                            | 
0x17e:                      | Pos23:
0x17e: 62dd                 | 	andq %r13, %r13		# val > 0?
0x180: 762c02000000000000   | 	jg Pos34
0x189: c0f00200000000000000 | 	iaddq $2, %rax		# count++
0x193: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x19d: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x1a6: 707802000000000000   | 	jmp Last
                            | 
0x1af:                      | Pos13:
0x1af: 62dd                 | 	andq %r13, %r13		# val > 0?
0x1b1: 760602000000000000   | 	jg Pos24
0x1ba: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1c4: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x1ce: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x1d7: 707802000000000000   | 	jmp Last
                            | 		
0x1e0:                      | Pos44:
0x1e0: c0f00400000000000000 | 	iaddq $4, %rax		# count++
0x1ea: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x1f4: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x1fd: 707802000000000000   | 	jmp Last
                            | 	
0x206:                      | Pos24:
0x206: c0f00200000000000000 | 	iaddq $2, %rax		# count++
0x210: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x21a: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x223: 707802000000000000   | 	jmp Last
                            | 	
0x22c:                      | Pos34:
0x22c: c0f00300000000000000 | 	iaddq $3, %rax		# count++
0x236: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x240: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x249: 707802000000000000   | 	jmp Last
                            | 	
0x252:                      | Pos14:
0x252: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x25c: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len--
0x266: 761e00000000000000   | 	jg Loop4			# if so, goto Loop:	
0x26f: 707802000000000000   | 	jmp Last
                            | 		
0x278:                      | Last: #We have len-3 <= 0 ie len<=3 : 0, 1, 2 or 3 cells to copy
                            | 	# rdx is -3, -2, -1 or 0  (mean len is 0,1,2 or 3) BINARY SEARCH
0x278: c0f20200000000000000 | 	iaddq $2, %rdx 	#rdx is now -1,0 ,1,2
0x282: 71af03000000000000   | 	jle BS_neg
0x28b:                      | BS_pos:	
                            | 	#Here rax is 1 or 2 (meaning len 2 or 3)
0x28b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx 	#rdx is now 0 ,1 (len 2 or 3) 
0x295: 76f902000000000000   | 	jg BS_3
0x29e:                      | BS_2:
                            | 	# Do 2 copies
0x29e: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x2a8: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x2b2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x2bc: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x2c6: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2c8: 71db02000000000000   | 	jle NPos2_1		# if so, goto Npos:
0x2d1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2db:                      | NPos2_1:
0x2db: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2dd: 71b803000000000000   | 	jle Done		# if so, finish:
0x2e6: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2f0: 70b803000000000000   | 	jmp Done
                            | 	
0x2f9:                      | BS_3:
                            | 	#Do 3 copies
0x2f9: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x303: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x30d: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x317: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x321: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x32b: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x335: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x337: 714a03000000000000   | 	jle NPos3_1		# if so, goto Npos:
0x340: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x34a:                      | NPos3_1:
0x34a: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x34c: 715f03000000000000   | 	jle NPos3_2		# if so, goto Npos:
0x355: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x35f:                      | NPos3_2:
0x35f: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x361: 71b803000000000000   | 	jle Done		# if so, finish:
0x36a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x374: 70b803000000000000   | 	jmp Done
                            | 
0x37d:                      | BS_1:
                            | 	#Do 1 copie
0x37d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | #	iaddq $8, %rdi		# src++
0x387: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | #	iaddq $8, %rsi		# dst++
0x391: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x393: 71b803000000000000   | 	jle Done
0x39c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3a6: 70b803000000000000   | 	jmp Done
                            | 
0x3af:                      | BS_neg:
                            | 	#Here rdx is -1 or 0 (meaning len 0 or 1)
                            | #	andq %rdx, %rdx #No need, still in register
0x3af: 757d03000000000000   | 	jge BS_1 # len 0
                            | 		
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3b8:                      | Done:
0x3b8: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3b9:                      | End:
                            | #/* $end ncopy-ys */
