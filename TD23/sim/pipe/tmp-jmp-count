#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-3,%rdx		# len < 0?
	jg Loop4		# if so, goto Done:
	jmp Last

Loop4: #We know that we have at least 4 more addresses to read
	mrmovq (%rdi), %r10	# read val from src...
 	mrmovq 8(%rdi), %r11	# read val from src...
 	mrmovq 16(%rdi), %r12	# read val from src...
 	mrmovq 24(%rdi), %r13	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	iaddq $32, %rsi		# dst++
	iaddq $32, %rdi		# src++
	andq %r10, %r10		# val > 0?
	jg PosY___		
PosN___:
	andq %r11, %r11		# val > 0?
#	jg PosNY__
	jg PosYN__				
PosNN___:
	andq %r12, %r12		# val > 0?
	jg PosNNY_
PosNNN_:
	andq %r13, %r13		# val > 0?
	jg PosNNNY
PosNNNN:
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:		
	jmp Last		

PosY___:
	andq %r11, %r11		# val > 0?
	jg PosYY__	
		
PosYN__:
	andq %r12, %r12		# val > 0?
	jg PosYNY_
	andq %r13, %r13		# val > 0?
	jg PosYNNY
	iaddq $1, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last
	
#PosNY__:
#	andq %r12, %r12		# val > 0?
#	jg PosNYY_
#	andq %r13, %r13		# val > 0?
#	jg PosNYNY
#	iaddq $1, %rax		# count++
#	iaddq $-4, %rdx		# len--
#	jg Loop4			# if so, goto Loop:	
#	jmp Last

PosYY__:
	andq %r12, %r12		# val > 0?
	jg PosYYY_
	andq %r13, %r13		# val > 0?
	jg PosYYNY
	iaddq $2, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last

PosYYY_:
	andq %r13, %r13		# val > 0?
	jg PosYYYY
	iaddq $3, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last

PosYNY_:
PosNYY_:
	andq %r13, %r13		# val > 0?
	jg PosYNYY
	iaddq $2, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last




PosNNY_:
	andq %r13, %r13		# val > 0?
	jg PosNNNY
	iaddq $1, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last
		
	
PosYYYY:
	iaddq $4, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last
	
PosYYNN:
PosYNYN:
PosYNNY:
PosNYYN:
PosNYNY:
PosNNYY:
	iaddq $2, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last
	
PosYYYN:
PosYYNY:
PosYNYY:
PosNYYY:
	iaddq $3, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last
	
PosNNNY:
PosNNYN:
PosNYNN:
PosYNNN:
	iaddq $1, %rax		# count++
	iaddq $-4, %rdx		# len--
	jg Loop4			# if so, goto Loop:	
	jmp Last
		
Last: #We have len-3 <= 0 ie len<=3 : 0, 1, 2 or 3 cells to copy
	# rdx is -3, -2, -1 or 0  (mean len is 0,1,2 or 3) BINARY SEARCH
	iaddq $2, %rdx 	#rdx is now -1,0 ,1,2
	jle BS_neg
BS_pos:	
	#Here rax is 1 or 2 (meaning len 2 or 3)
	iaddq $-1, %rdx 	#rdx is now 0 ,1 (len 2 or 3) 
	jg BS_3
BS_2:
	# Do 2 copies
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle NPos2_1		# if so, goto Npos:
	iaddq $1, %rax		# count++
NPos2_1:
	andq %r11, %r11		# val <= 0?
	jle Done		# if so, finish:
	iaddq $1, %rax		# count++
	jmp Done
	
BS_3:
	#Do 3 copies
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle NPos3_1		# if so, goto Npos:
	iaddq $1, %rax		# count++
NPos3_1:
	andq %r11, %r11		# val <= 0?
	jle NPos3_2		# if so, goto Npos:
	iaddq $1, %rax		# count++
NPos3_2:
	andq %r12, %r12		# val <= 0?
	jle Done		# if so, finish:
	iaddq $1, %rax		# count++
	jmp Done

BS_1:
	#Do 1 copie
	mrmovq (%rdi), %r10	# read val from src...
#	iaddq $8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
#	iaddq $8, %rsi		# dst++
	andq %r10, %r10		# val <= 0?
	jle Done
	iaddq $1, %rax		# count++
	jmp Done

BS_neg:
	#Here rdx is -1 or 0 (meaning len 0 or 1)
#	andq %rdx, %rdx #No need, still in register
	jge BS_1 # len 0
		

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
